<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
										                                                 xmlns:provinces="contacts.provinces.*" 
										                                                 initialize="initListener(event)" 
										                                                 creationComplete="creationCompleteListener(event)">
	
	
	<mx:Script>
		<![CDATA[
			import contacts.provinces.valueobjects.ProvinceServiceResultsVO;
			import contacts.provinces.service.ProvinceHttpSrvcResponder;
			import com.components.service.data.RMT2AbstractResponder;
			import mx.rpc.AsyncToken;
			import mx.controls.Alert;
			
			import com.components.service.data.RMT2ResponderResultsEvent;
			
			import contacts.provinces.events.ProvinceUpdateEvent;
			import contacts.provinces.events.ProvinceResetEvent;
			import contacts.provinces.events.ProvinceQueryRequestEvent;
			import mx.collections.XMLListCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.event.SessionTokenEvent;
			import com.net.RMT2HttpService;
			import com.valueobject.SessionTokenVO;
			
			
			private const HTTP_URL_FETCH : String = "/contacts/xmlStreamProcessor/State.Search";
			
			private const HTTP_URL_EDIT : String = "/contacts/xmlStreamProcessor/State.Edit";
			
			private const HTTP_URL_FETCH_COUNTRIES : String = "/contacts/xmlStreamProcessor/Country.Search";
			
			[Bindable]
            private var session : SessionTokenVO;
            
			[Bindable]
			private var countryList : XMLList;
			
			[Bindable]
			private var provinceList : XMLListCollection;
			
			
		
			
			private function initListener(e : Event) : void {
				var event : SessionTokenEvent = new SessionTokenEvent(SessionTokenEvent.EVENT_NAME, false);
				this.dispatchEvent(event);
				this.session = event.getToken();
				
				this.addEventListener(ProvinceQueryRequestEvent.EVENT_NAME, provinceRequestQueryListener,  true);
				this.addEventListener(ProvinceUpdateEvent.EVENT_NAME, provinceRequestUpdateListener,  true);
				this.addEventListener(ProvinceResetEvent.EVENT_NAME, resetProvincePageListener, true);
				this.addEventListener(RMT2ResponderResultsEvent.EVENT_NAME, bindHttpServiceResultsListener);
			}
			
			
			
			
			private function creationCompleteListener(e : Event) : void {
				if (this.countryList == null) {   
					var rootUrl : String = this.session.hostUrl;                    
					var srvc : RMT2HttpService = new RMT2HttpService(rootUrl);
					srvc.setupURL(HTTP_URL_FETCH_COUNTRIES, rootUrl);
					var token : AsyncToken = srvc.send(this.countryListReqModel);
					token[RMT2AbstractResponder.PROP_NAME_SERVICE_ID] = ProvinceHttpSrvcResponder.CLIENT_ACTION_COUNTRY_LIST;
					token[RMT2AbstractResponder.PROP_NAME_CALLER] = this;
					token.addResponder(new ProvinceHttpSrvcResponder());
					srvc.close();
					srvc = null;
				}
			}
			
			
			/**
			 * Clears the message area.  
			 */
			private function resetProvincePageListener(e : ProvinceResetEvent) : void {
				this.messageArea.text = null;
				return;
			}
			
			
			
			private function provinceRequestQueryListener(e : ProvinceQueryRequestEvent) : void {
				var req : Object = e.request;
				var rootUrl : String = this.session.hostUrl;   
				var srvc : RMT2HttpService = new RMT2HttpService(rootUrl);
				srvc.setupURL(HTTP_URL_FETCH, rootUrl);
				var token : AsyncToken = srvc.send(e.request);		
				token[RMT2AbstractResponder.PROP_NAME_SERVICE_ID] = ProvinceHttpSrvcResponder.CLIENT_ACTION_SEARCH;
				token[RMT2AbstractResponder.PROP_NAME_CALLER] = this;
				token.addResponder(new ProvinceHttpSrvcResponder());
				srvc.close();
				srvc = null;	
				return;
			}
			
			
			private function provinceRequestUpdateListener(e : ProvinceUpdateEvent) : void {
				var req : Object = e.province;
				var rootUrl : String = this.session.hostUrl;         
				var srvc : RMT2HttpService = new RMT2HttpService(rootUrl);
				srvc.setupURL(HTTP_URL_EDIT, rootUrl);
				var token : AsyncToken = srvc.send(req);
			    token[RMT2AbstractResponder.PROP_NAME_SERVICE_ID] = req.clientAction;
				token[RMT2AbstractResponder.PROP_NAME_CALLER] = this;
				token.addResponder(new ProvinceHttpSrvcResponder());
				srvc.close();
				srvc = null;
				return;
			}
			
			
			private function bindHttpServiceResultsListener(e : RMT2ResponderResultsEvent) : void {
				if (e.error) {
					Alert.show(e.message, "Server Error");
					return;
				}
				switch (e.serviceId) {
					case ProvinceHttpSrvcResponder.CLIENT_ACTION_COUNTRY_LIST:
						this.countryList = e.results as XMLList;
						break;
						
					case ProvinceHttpSrvcResponder.CLIENT_ACTION_SEARCH:
					   var msg : String = null;
						var vo : ProvinceServiceResultsVO = e.results as ProvinceServiceResultsVO;
						if (vo.status.return_status == "SUCCESS") {
							this.provinceList = vo.provinceList;	
							msg = "Total records found: " + vo.status.return_code;
							this.messageArea.setStyle("color", "black");
						}
						else {
							this.provinceList = null;
							msg = vo.status.ext_message;
							this.messageArea.setStyle("color", "red");
						}
						this.messageArea.text = msg;
						break;
					
					case ProvinceHttpSrvcResponder.CLIENT_ACTION_SAVE:
					case ProvinceHttpSrvcResponder.CLIENT_ACTION_DELETE:
						var result : XML = e.results as XML;
						if (result != null) {
							if (result.return_status == "SUCCESS") {
								this.messageArea.setStyle("color", "black");
							}
							else {
								this.messageArea.setStyle("color", "red");
							}
							this.messageArea.text =  result.ext_message;
						} 	
						break;
						
					default:
				}
			}
			
		]]>
	</mx:Script>

    <mx:Model id="countryListReqModel" source="model/SrvcParms_CountryList.xml"/>
    
    <mx:Binding source="ProvinceHttpSrvcResponder.CLIENT_ACTION_COUNTRY_LIST" destination="countryListReqModel.clientAction"/>
    
	<mx:Canvas id="pContainer" width="1000" height="600" styleName="colorPanel">
	    <mx:VBox width="100%" height="100%"  left="10">
		    <provinces:ProvinceQueryAndSearchView width="100%" height="99%" left="10" countryList="{this.countryList}" provinceList="{provinceList}"/>
			<mx:Label id="messageArea" width="100%" color="red"/>	
	    </mx:VBox>
	</mx:Canvas>
</mx:Module>
